'From MIT Squeak 0.9.4 (June 1, 2003) [No updates present.] on 28 February 2011 at 9:20:18 am'!Object subclass: #Pair	instanceVariableNames: 'car cdr '	classVariableNames: ''	poolDictionaries: ''	category: 'Scratch-BYOB'!!BYOBList methodsFor: 'accessing' stamp: 'bh 2/26/2011 23:48'!convertToLinked	"turn Scratch list into real linked list"	| first last |	first _ nil. last _ nil.	self size = 0 ifTrue: [^self].	1 to: self size do: [:i |		first = nil	ifTrue: [first _ last _ #pair new]					ifFalse: [last cdr: #pair new. last _ last cdr].		last car: (self at: i)].	last cdr: BYOBList new.	^first.! !!Pair methodsFor: 'access' stamp: 'bh 2/27/2011 20:26'!at: index	"list-ref"	|  |	(index = 1) ifTrue: [^self car].	^self cdr at: (index-1).! !!Pair methodsFor: 'access' stamp: 'bh 2/26/2011 20:52'!car	"duh"	|  |	^car! !!Pair methodsFor: 'access' stamp: 'bh 2/26/2011 23:50'!car: newCar	"duh"	|  |	car _ newCar.! !!Pair methodsFor: 'access' stamp: 'bh 2/26/2011 20:52'!cdr	"duh"	|  |	^cdr! !!Pair methodsFor: 'access' stamp: 'bh 2/26/2011 23:50'!cdr: newCdr	"duh"	|  |	cdr _ newCdr.! !!Pair methodsFor: 'access' stamp: 'bh 2/27/2011 20:30'!contents	"if someone asks for my contents, punt by converting to Scratch list"	|  |	^self convertToScratchList contents.! !!Pair methodsFor: 'access' stamp: 'bh 2/27/2011 20:21'!convertToScratchList	"from real list to dynamic array"	| list thispair |	list _ BYOBList new.	thispair _ self.	[thispair isKindOf: #pair] whileTrue: [		list insertLine: (thispair car) at: (list lineCount + 1)	].	(thispair isKindOf: #BYOBList) ifTrue: [	1 to: thispair size do: [:i |		list insertLine: (thispair at: i) at: (list lineCount + 1)	]].	^list.! !!Pair methodsFor: 'access' stamp: 'bh 2/27/2011 20:28'!size	"length"	|  |	^(self cdr size)+1.! !!Pair methodsFor: 'initialize' stamp: 'bh 2/26/2011 16:39'!cons: newCar to: newCdr	"make a pair"	|  |	car _ newCar.	cdr _ newCdr.	^self! !!ScriptableScratchMorph methodsFor: 'list ops' stamp: 'bh 2/26/2011 23:36'!butfirst: listName	"cdr of linked, or convert Scratch to linked"	| list |	(listName isKindOf: #pair) ifTrue: [^listName cdr].	(listName isKindOf: ScratchListMorph)		ifTrue: [list _ listName]		ifFalse: [list _ self listNamed: listName ifNone: [^ 0]].	^list convertToLinked cdr.! !!ScriptableScratchMorph class methodsFor: 'block specs' stamp: 'bh 2/26/2011 23:20'!blockSpecs	"Answer a collection of block specifications for the blocks that are common to all objects. Block specificatons (Arrays) are interspersed with category names (Strings). A block specification is an Array of the form: (<block spec string> <block type> <selector> [optional initial argument values]).	Explanation of flags:		-	no flags		b	boolean reporter		c	c-shaped block containing a sequence of commands (always special form)		r	reporter		R	special form reporter with its own evaluation rule		s	special form command with its own evaluation rule		t	timed command, like wait or glide		E	message event hat		K	key event hat		M	mouse-click event hat		S	start event hat		W	when <condition> hat (obsolete)"	| blocks |	blocks _ #(		'control'			('when %m clicked'				S	-)			('when %k key pressed'			K	-)			('when %m clicked'				M	-)			-			('wait %n secs'					t	wait:elapsed:from: 1)			-			('forever'						c	doForever)			('repeat %n'						c	doRepeat 10)			-			('broadcast %e'					-	broadcast:)			('broadcast %e and wait'			s	doBroadcastAndWait)			('when I receive %e'			E	-)			-			('forever if %b'					c	doForeverIf)			('if %b'							c	doIf)			('if %b'							c	doIfElse)			('wait until %b'					s	doWaitUntil)			('repeat until %b'				c	doUntil)			-"			('stop all scripts for %e'			-	stopAllScriptsFor:)"			('stop script'					s	doReturn)			('stop all'						-	stopAll)"			-			('self'							r	objName)"			=			('run %o'						u	doRun)			('run %o %A %s'				u	doRunBlockWithArgs)			('run %o %A %t'					u	doRunBlockWithArgList)			('launch %o'					u	doFork)			('launch %o %A %s'				u	doForkBlockWithArgs)			('launch %o %A %t'				u	doForkBlockWithArgList)			('call %r'						d	doReport)			('call %r %A %s'					d	doCallBlockWithArgs)			('call %r %A %t'					d	doCallBlockWithArgList)			-			('report %s'						s	doAnswer)			('stop block'						s	doStopBlock)			-			('debug'							s	doPauseThread)			('debug %s'						R	doPauseThreadReporter)"			('inspect %s'					-	inspect:)"		'operators'			('%n + %n'						r	+ - -)			('%n - %n'						r	- - -)			('%n * %n'						r	* - -)			('%n / %n'						r	/ - -)			-			('pick random %n to %n'		r	randomFrom:to: 1 10)			-			('%s < %s'						b	< '' '')			('%s = %s'						b	= '' '')			('%s > %s'						b	> '' '')			-			('%b and %b'					b	&)			('%b or %b'						b	|)			('not %b'						b	not)			-			('true'							b	getTrue)			('false'							b	getFalse)			-			('join %s %s'					r	concatenate:with: 'hello ' 'world')			('letter %n of %s'				r	letter:of: 1 'world')			('length of %s'					r	stringLength: 'world')			-			('ascii code of %s'				r	asciiCodeOf: 'a')			('ascii %n as letter'				r	asciiLetter: '65')			-			('%n mod %n'					r	\\ - -)			('round %n'						r	rounded -)			-			('%f of %n'						r	computeFunction:of: 'sqrt' 10)			-			('is %s a %F ?'					b	isObject:type:)			=			('the script'						q	procedure)			('the script. Input names: %s'			q	procedureWithArgs)			('the %Z block'					Q	function)			('the %Z block. Input names: %s'		Q	functionWithArgs)		'sound'			('play sound %S'				-	playSound:)			('play sound %S until done'		s	doPlaySoundAndWait)			('stop all sounds'				-	stopAllSounds)			-			('play drum %D for %n beats'	t 	drum:duration:elapsed:from: 48 0.2)			('rest for %n beats'				t 	rest:elapsed:from: 0.2)			-			('play note %N for %n beats'	t	noteOn:duration:elapsed:from: 60 0.5)			('set instrument to %I'			- 	midiInstrument: 1)			-			('change volume by %n'		- 	changeVolumeBy: -10)			('set volume to %n%'			- 	setVolumeTo: 100)			('volume'						r 	volume)			-			('change tempo by %n'			- 	changeTempoBy: 20)			('set tempo to %n bpm'			- 	setTempoTo: 60)			('tempo'							r 	tempo)		'motor'			('motor on for %n secs'			t	motorOnFor:elapsed:from: 1)			('motor on'						-	allMotorsOn)			('motor off'						-	allMotorsOff)			('motor power %n'				-	startMotorPower: 100)			('motor direction %W'			-	setMotorDirection: 'this way')		'variables'			('show variable %v'				-	showVariable:)			('hide variable %v'				-	hideVariable:)		'list'			('list %X'						r	newList:)			-			('add %s to %L'					-	append:toList: 'thing')			('delete %y of %L'				-	deleteLine:ofList: 1)			('insert %s at %i of %L'			-	insert:at:ofList: 'thing' 1)			('replace item %i of %L with %s'		-	setLine:ofList:to: 1 'list' 'thing')			-			('item %i of %L'					r	getLine:ofList: 1)			('adjoin %s to %L'				r	cons:to: )			('all but first of %L'			r	butfirst: )			('length of %L'					r	lineCountOfList:)			('%L contains %s'				b	list:contains: 'list' 'thing')			('%L as text'						r	contentsOfList: )			-			('copy of %t'					r	copyOfList: )	).	^ blocks, self obsoleteBlockSpecs! !BYOBList removeSelector: #butfirst!BYOBList removeSelector: #butfirst:!